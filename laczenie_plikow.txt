import os

path = '/home/norbert/mrdn/euglena/kod_i_pliki/surowe_pliki_plus_minus_500/raw_reads_9'
path_to_output = "/home/norbert/mrdn/euglena/kod_i_pliki/surowe_pliki_plus_minus_500/raw_reads_9/merging_fastas"

#If you would like to overwrite a files, first delete them manually
#uporzadkujmy tak by jednak ta sekwencja z wieksza iloscia przerw byla pierwsza #python nie obsluguje kolejnosci w slowniku - bedziemy musieli to uwzglednic w kodzie na funkcje cutting_scrap # we wszystkich plikach jakie recznie sprawdziłem tak własnie jest i nie jest wymagana modyfikacja

def merging_fastas(path_to_raw_reads, output_directory):
    for filename in os.listdir(path_to_raw_reads):
        file = os.path.join(path_to_raw_reads, filename)
        choosen_organism = None
        sequences_dict = {}
        if file.endswith(".fasta"):
            with open(file, "r") as file:
                for line in file:
                    if line.startswith(">"):
                        organism_id = line.strip().replace(" ", "_") #that first fine in fasta file
                        choosen_organism = organism_id
                        if choosen_organism not in sequences_dict:
                            sequences_dict[choosen_organism] = []
                    else:
                        sequences_dict[choosen_organism].append(line.strip())

            for name_from_dictionary in sequences_dict.keys(): 
                print("name from dictionary:", name_from_dictionary)
                print("filename: ", filename)
                output_file = f"{name_from_dictionary[1:4]}_{str(filename)}"                
                path_to_output_file = os.path.join(output_directory, output_file)
                print("output: ", output_file, "\n")
                if not os.path.exists(path_to_output_file):
                    print(f"tworze ten plik {path_to_output_file} poraz pierwszy")
                    with open(path_to_output_file, "w") as f:
                        f.write(name_from_dictionary + "\n")
                        for lines in sequences_dict[name_from_dictionary]:
                            f.write(lines + "\n")
                else:
                    count = 0
                    with open(path_to_output_file, "r") as f:
                        text = f.read()
                        count = text.count(">")
                        if count < 2:
                            with open(path_to_output_file, "a") as f:
                                f.write(name_from_dictionary + "\n")
                                for lines in sequences_dict[name_from_dictionary]:
                                    f.write(lines + "\n")
                        else:
                            print(f"In that file {path_to_output_file} there are already 2 fasta sequences. Make sure is it correct")
#Cele
#mafft dla wszystkich z unixa


#stan na chwile obecna:
# musze uruchomic laczenie_plikow na wszystkich plikach - napisany skrypt
#zrobic maffta mafft --op 1.53 --ep 0.5 --jtt 1t LON_OG0030307.fasta > LON_OG0030307.fasta_opepjtt na wszystkich plikach - skryptem napisac #SKRYPT JEST NAPISANY
#zmodyfikowac funkcje cutting_introns by rozpatrywala fasta a nie clustal ze wzlegu na lagłowek wygladajacy tak: "LON" zamiast pełnej wersji. Ewentualnie rozwiazaniem jest by usunac spacje w naglowku przed puszczeniem maffta z outputem clustal
# zmodyfikować funkcje cuting introns przystosowujac ja do nowego inputu
#Podczas implementacji na serwerze pozmieniaj sciezki


merging_fastas(path, path_to_output)